1.final关键字如果修饰类属性的话，如果没有初始化的话，只能在构造方法以及构造代码块内初始化。
2.final无法修饰构造方法
3.final关键字可以用来修饰类、方法和变量。
修饰类：final修饰的类不能被继承，即该类不能有子类。
修饰方法：final修饰的方法不能被子类重写。
修饰变量：final修饰的变量是一个常量，一旦被赋值后就不能再次修改。
注意事项：
final类中的所有成员方法都会隐式地被指定为final方法。
final方法在继承时不能被重写。
final变量一旦被赋值后就不能再次修改，所以一般需要在声明时或者构造方法中进行初始化。


abstract关键字：
abstract关键字可以用来修饰类和方法。
修饰类：abstract修饰的类是抽象类，不能被实例化，只能被继承。
修饰方法：abstract修饰的方法是抽象方法，只有方法的声明，没有方法的实现。抽象方法必须在抽象类中声明，子类必须实现抽象方法。
注意事项：
抽象类不能被实例化，只能用作父类。
如果一个类继承了一个抽象类，那么子类必须实现抽象类中的所有抽象方法，除非子类自己也是抽象类。
抽象方法不能被声明为final、private或static，因为这些修饰符和抽象方法的特性相互冲突。


static关键字：
static关键字可以用来修饰类、方法和变量。
修饰类：static修饰的类是静态内部类，可以直接使用，无需实例化外部类。
修饰方法：static修饰的方法是静态方法，可以通过类名直接调用，无需创建对象。
修饰变量：static修饰的变量是静态变量，属于类的成员变量，可以通过类名直接访问，无需创建对象。
注意事项：
静态方法不能直接访问非静态的成员变量和方法，只能访问静态的成员变量和方法。
静态方法中不能使用this关键字，因为this代表当前对象，而静态方法属于类而不是对象。
静态变量在内存中只有一份拷贝，被所有实例共享，可以通过类名直接访问。
静态变量的初始化顺序是按照静态变量的声明顺序进行的，且只会初始化一次。
